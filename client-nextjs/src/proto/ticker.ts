// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface TickerRequest {
  market: string;
}

export interface TickerResponse {
  /** 종목 구분 코드 */
  market: string;
  /** 최근 거래 일자(UTC) */
  trade_date: string;
  /** 최근 거래 시각(UTC) */
  trade_time: string;
  /** 최근 거래 일자(KST) */
  trade_date_kst: string;
  /** 최근 거래 시각(KST) */
  trade_time_kst: string;
  /** 최근 거래 일시(UTC) */
  trade_timestamp: number;
  /** 시가 */
  opening_price: number;
  /** 고가 */
  high_price: number;
  /** 저가 */
  low_price: number;
  /** 종가(현재가) */
  trade_price: number;
  /** 전일 종가(UTC 0시 기준) */
  prev_closing_price: number;
  /** 보합/상승/하락 구분 */
  change: string;
  /** 변화액의 절대값 */
  change_price: number;
  /** 변화율의 절대값 */
  change_rate: number;
  /** 부호가 있는 변화액 */
  signed_change_price: number;
  /** 부호가 있는 변화율 */
  signed_change_rate: number;
  /** 가장 최근 거래량 */
  trade_volume: number;
  /** 누적 거래대금(UTC 0시 기준) */
  acc_trade_price: number;
  /** 24시간 누적 거래대금 */
  acc_trade_price_24h: number;
  /** 누적 거래량(UTC 0시 기준) */
  acc_trade_volume: number;
  /** 24시간 누적 거래량 */
  acc_trade_volume_24h: number;
  /** 52주 신고가 */
  highest_52_week_price: number;
  /** 52주 신고가 */
  highest_52_week_date: string;
  /** 52주 신저가 */
  lowest_52_week_price: number;
  /** 52주 신저가 */
  lowest_52_week_date: string;
  /** 타임스탬프 */
  timestamp: number;
}

export interface StreamRequest {
  type: string;
  code: string;
}

export interface StreamResponse {
  message: string;
}

function createBaseTickerRequest(): TickerRequest {
  return { market: "" };
}

export const TickerRequest: MessageFns<TickerRequest> = {
  encode(message: TickerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.market !== "") {
      writer.uint32(10).string(message.market);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.market = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerRequest {
    return { market: isSet(object.market) ? globalThis.String(object.market) : "" };
  },

  toJSON(message: TickerRequest): unknown {
    const obj: any = {};
    if (message.market !== "") {
      obj.market = message.market;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerRequest>, I>>(base?: I): TickerRequest {
    return TickerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerRequest>, I>>(object: I): TickerRequest {
    const message = createBaseTickerRequest();
    message.market = object.market ?? "";
    return message;
  },
};

function createBaseTickerResponse(): TickerResponse {
  return {
    market: "",
    trade_date: "",
    trade_time: "",
    trade_date_kst: "",
    trade_time_kst: "",
    trade_timestamp: 0,
    opening_price: 0,
    high_price: 0,
    low_price: 0,
    trade_price: 0,
    prev_closing_price: 0,
    change: "",
    change_price: 0,
    change_rate: 0,
    signed_change_price: 0,
    signed_change_rate: 0,
    trade_volume: 0,
    acc_trade_price: 0,
    acc_trade_price_24h: 0,
    acc_trade_volume: 0,
    acc_trade_volume_24h: 0,
    highest_52_week_price: 0,
    highest_52_week_date: "",
    lowest_52_week_price: 0,
    lowest_52_week_date: "",
    timestamp: 0,
  };
}

export const TickerResponse: MessageFns<TickerResponse> = {
  encode(message: TickerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.market !== "") {
      writer.uint32(10).string(message.market);
    }
    if (message.trade_date !== "") {
      writer.uint32(18).string(message.trade_date);
    }
    if (message.trade_time !== "") {
      writer.uint32(26).string(message.trade_time);
    }
    if (message.trade_date_kst !== "") {
      writer.uint32(34).string(message.trade_date_kst);
    }
    if (message.trade_time_kst !== "") {
      writer.uint32(42).string(message.trade_time_kst);
    }
    if (message.trade_timestamp !== 0) {
      writer.uint32(48).int64(message.trade_timestamp);
    }
    if (message.opening_price !== 0) {
      writer.uint32(57).double(message.opening_price);
    }
    if (message.high_price !== 0) {
      writer.uint32(65).double(message.high_price);
    }
    if (message.low_price !== 0) {
      writer.uint32(73).double(message.low_price);
    }
    if (message.trade_price !== 0) {
      writer.uint32(81).double(message.trade_price);
    }
    if (message.prev_closing_price !== 0) {
      writer.uint32(89).double(message.prev_closing_price);
    }
    if (message.change !== "") {
      writer.uint32(98).string(message.change);
    }
    if (message.change_price !== 0) {
      writer.uint32(105).double(message.change_price);
    }
    if (message.change_rate !== 0) {
      writer.uint32(113).double(message.change_rate);
    }
    if (message.signed_change_price !== 0) {
      writer.uint32(121).double(message.signed_change_price);
    }
    if (message.signed_change_rate !== 0) {
      writer.uint32(129).double(message.signed_change_rate);
    }
    if (message.trade_volume !== 0) {
      writer.uint32(137).double(message.trade_volume);
    }
    if (message.acc_trade_price !== 0) {
      writer.uint32(145).double(message.acc_trade_price);
    }
    if (message.acc_trade_price_24h !== 0) {
      writer.uint32(153).double(message.acc_trade_price_24h);
    }
    if (message.acc_trade_volume !== 0) {
      writer.uint32(161).double(message.acc_trade_volume);
    }
    if (message.acc_trade_volume_24h !== 0) {
      writer.uint32(169).double(message.acc_trade_volume_24h);
    }
    if (message.highest_52_week_price !== 0) {
      writer.uint32(177).double(message.highest_52_week_price);
    }
    if (message.highest_52_week_date !== "") {
      writer.uint32(186).string(message.highest_52_week_date);
    }
    if (message.lowest_52_week_price !== 0) {
      writer.uint32(193).double(message.lowest_52_week_price);
    }
    if (message.lowest_52_week_date !== "") {
      writer.uint32(202).string(message.lowest_52_week_date);
    }
    if (message.timestamp !== 0) {
      writer.uint32(208).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.market = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trade_date = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.trade_time = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.trade_date_kst = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trade_time_kst = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.trade_timestamp = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.opening_price = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.high_price = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.low_price = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.trade_price = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.prev_closing_price = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.change = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.change_price = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.change_rate = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 121) {
            break;
          }

          message.signed_change_price = reader.double();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.signed_change_rate = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 137) {
            break;
          }

          message.trade_volume = reader.double();
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.acc_trade_price = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 153) {
            break;
          }

          message.acc_trade_price_24h = reader.double();
          continue;
        }
        case 20: {
          if (tag !== 161) {
            break;
          }

          message.acc_trade_volume = reader.double();
          continue;
        }
        case 21: {
          if (tag !== 169) {
            break;
          }

          message.acc_trade_volume_24h = reader.double();
          continue;
        }
        case 22: {
          if (tag !== 177) {
            break;
          }

          message.highest_52_week_price = reader.double();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.highest_52_week_date = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 193) {
            break;
          }

          message.lowest_52_week_price = reader.double();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.lowest_52_week_date = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerResponse {
    return {
      market: isSet(object.market) ? globalThis.String(object.market) : "",
      trade_date: isSet(object.trade_date) ? globalThis.String(object.trade_date) : "",
      trade_time: isSet(object.trade_time) ? globalThis.String(object.trade_time) : "",
      trade_date_kst: isSet(object.trade_date_kst) ? globalThis.String(object.trade_date_kst) : "",
      trade_time_kst: isSet(object.trade_time_kst) ? globalThis.String(object.trade_time_kst) : "",
      trade_timestamp: isSet(object.trade_timestamp) ? globalThis.Number(object.trade_timestamp) : 0,
      opening_price: isSet(object.opening_price) ? globalThis.Number(object.opening_price) : 0,
      high_price: isSet(object.high_price) ? globalThis.Number(object.high_price) : 0,
      low_price: isSet(object.low_price) ? globalThis.Number(object.low_price) : 0,
      trade_price: isSet(object.trade_price) ? globalThis.Number(object.trade_price) : 0,
      prev_closing_price: isSet(object.prev_closing_price) ? globalThis.Number(object.prev_closing_price) : 0,
      change: isSet(object.change) ? globalThis.String(object.change) : "",
      change_price: isSet(object.change_price) ? globalThis.Number(object.change_price) : 0,
      change_rate: isSet(object.change_rate) ? globalThis.Number(object.change_rate) : 0,
      signed_change_price: isSet(object.signed_change_price) ? globalThis.Number(object.signed_change_price) : 0,
      signed_change_rate: isSet(object.signed_change_rate) ? globalThis.Number(object.signed_change_rate) : 0,
      trade_volume: isSet(object.trade_volume) ? globalThis.Number(object.trade_volume) : 0,
      acc_trade_price: isSet(object.acc_trade_price) ? globalThis.Number(object.acc_trade_price) : 0,
      acc_trade_price_24h: isSet(object.acc_trade_price_24h) ? globalThis.Number(object.acc_trade_price_24h) : 0,
      acc_trade_volume: isSet(object.acc_trade_volume) ? globalThis.Number(object.acc_trade_volume) : 0,
      acc_trade_volume_24h: isSet(object.acc_trade_volume_24h) ? globalThis.Number(object.acc_trade_volume_24h) : 0,
      highest_52_week_price: isSet(object.highest_52_week_price) ? globalThis.Number(object.highest_52_week_price) : 0,
      highest_52_week_date: isSet(object.highest_52_week_date) ? globalThis.String(object.highest_52_week_date) : "",
      lowest_52_week_price: isSet(object.lowest_52_week_price) ? globalThis.Number(object.lowest_52_week_price) : 0,
      lowest_52_week_date: isSet(object.lowest_52_week_date) ? globalThis.String(object.lowest_52_week_date) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: TickerResponse): unknown {
    const obj: any = {};
    if (message.market !== "") {
      obj.market = message.market;
    }
    if (message.trade_date !== "") {
      obj.trade_date = message.trade_date;
    }
    if (message.trade_time !== "") {
      obj.trade_time = message.trade_time;
    }
    if (message.trade_date_kst !== "") {
      obj.trade_date_kst = message.trade_date_kst;
    }
    if (message.trade_time_kst !== "") {
      obj.trade_time_kst = message.trade_time_kst;
    }
    if (message.trade_timestamp !== 0) {
      obj.trade_timestamp = Math.round(message.trade_timestamp);
    }
    if (message.opening_price !== 0) {
      obj.opening_price = message.opening_price;
    }
    if (message.high_price !== 0) {
      obj.high_price = message.high_price;
    }
    if (message.low_price !== 0) {
      obj.low_price = message.low_price;
    }
    if (message.trade_price !== 0) {
      obj.trade_price = message.trade_price;
    }
    if (message.prev_closing_price !== 0) {
      obj.prev_closing_price = message.prev_closing_price;
    }
    if (message.change !== "") {
      obj.change = message.change;
    }
    if (message.change_price !== 0) {
      obj.change_price = message.change_price;
    }
    if (message.change_rate !== 0) {
      obj.change_rate = message.change_rate;
    }
    if (message.signed_change_price !== 0) {
      obj.signed_change_price = message.signed_change_price;
    }
    if (message.signed_change_rate !== 0) {
      obj.signed_change_rate = message.signed_change_rate;
    }
    if (message.trade_volume !== 0) {
      obj.trade_volume = message.trade_volume;
    }
    if (message.acc_trade_price !== 0) {
      obj.acc_trade_price = message.acc_trade_price;
    }
    if (message.acc_trade_price_24h !== 0) {
      obj.acc_trade_price_24h = message.acc_trade_price_24h;
    }
    if (message.acc_trade_volume !== 0) {
      obj.acc_trade_volume = message.acc_trade_volume;
    }
    if (message.acc_trade_volume_24h !== 0) {
      obj.acc_trade_volume_24h = message.acc_trade_volume_24h;
    }
    if (message.highest_52_week_price !== 0) {
      obj.highest_52_week_price = message.highest_52_week_price;
    }
    if (message.highest_52_week_date !== "") {
      obj.highest_52_week_date = message.highest_52_week_date;
    }
    if (message.lowest_52_week_price !== 0) {
      obj.lowest_52_week_price = message.lowest_52_week_price;
    }
    if (message.lowest_52_week_date !== "") {
      obj.lowest_52_week_date = message.lowest_52_week_date;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerResponse>, I>>(base?: I): TickerResponse {
    return TickerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerResponse>, I>>(object: I): TickerResponse {
    const message = createBaseTickerResponse();
    message.market = object.market ?? "";
    message.trade_date = object.trade_date ?? "";
    message.trade_time = object.trade_time ?? "";
    message.trade_date_kst = object.trade_date_kst ?? "";
    message.trade_time_kst = object.trade_time_kst ?? "";
    message.trade_timestamp = object.trade_timestamp ?? 0;
    message.opening_price = object.opening_price ?? 0;
    message.high_price = object.high_price ?? 0;
    message.low_price = object.low_price ?? 0;
    message.trade_price = object.trade_price ?? 0;
    message.prev_closing_price = object.prev_closing_price ?? 0;
    message.change = object.change ?? "";
    message.change_price = object.change_price ?? 0;
    message.change_rate = object.change_rate ?? 0;
    message.signed_change_price = object.signed_change_price ?? 0;
    message.signed_change_rate = object.signed_change_rate ?? 0;
    message.trade_volume = object.trade_volume ?? 0;
    message.acc_trade_price = object.acc_trade_price ?? 0;
    message.acc_trade_price_24h = object.acc_trade_price_24h ?? 0;
    message.acc_trade_volume = object.acc_trade_volume ?? 0;
    message.acc_trade_volume_24h = object.acc_trade_volume_24h ?? 0;
    message.highest_52_week_price = object.highest_52_week_price ?? 0;
    message.highest_52_week_date = object.highest_52_week_date ?? "";
    message.lowest_52_week_price = object.lowest_52_week_price ?? 0;
    message.lowest_52_week_date = object.lowest_52_week_date ?? "";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseStreamRequest(): StreamRequest {
  return { type: "", code: "" };
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(message: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamRequest {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: StreamRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamRequest>, I>>(base?: I): StreamRequest {
    return StreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamRequest>, I>>(object: I): StreamRequest {
    const message = createBaseStreamRequest();
    message.type = object.type ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseStreamResponse(): StreamResponse {
  return { message: "" };
}

export const StreamResponse: MessageFns<StreamResponse> = {
  encode(message: StreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: StreamResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamResponse>, I>>(base?: I): StreamResponse {
    return StreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamResponse>, I>>(object: I): StreamResponse {
    const message = createBaseStreamResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type TickerServiceService = typeof TickerServiceService;
export const TickerServiceService = {
  getTicker: {
    path: "/TickerService/getTicker",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TickerRequest): Buffer => Buffer.from(TickerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TickerRequest => TickerRequest.decode(value),
    responseSerialize: (value: TickerResponse): Buffer => Buffer.from(TickerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TickerResponse => TickerResponse.decode(value),
  },
  streamTicker: {
    path: "/TickerService/streamTicker",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StreamRequest): Buffer => Buffer.from(StreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StreamRequest => StreamRequest.decode(value),
    responseSerialize: (value: StreamResponse): Buffer => Buffer.from(StreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): StreamResponse => StreamResponse.decode(value),
  },
} as const;

export interface TickerServiceServer extends UntypedServiceImplementation {
  getTicker: handleUnaryCall<TickerRequest, TickerResponse>;
  streamTicker: handleServerStreamingCall<StreamRequest, StreamResponse>;
}

export interface TickerServiceClient extends Client {
  getTicker(
    request: TickerRequest,
    callback: (error: ServiceError | null, response: TickerResponse) => void,
  ): ClientUnaryCall;
  getTicker(
    request: TickerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TickerResponse) => void,
  ): ClientUnaryCall;
  getTicker(
    request: TickerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TickerResponse) => void,
  ): ClientUnaryCall;
  streamTicker(request: StreamRequest, options?: Partial<CallOptions>): ClientReadableStream<StreamResponse>;
  streamTicker(
    request: StreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<StreamResponse>;
}

export const TickerServiceClient = makeGenericClientConstructor(TickerServiceService, "TickerService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TickerServiceClient;
  service: typeof TickerServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
