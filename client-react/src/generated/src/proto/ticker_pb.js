// source: src/proto/ticker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.StreamRequest', null, global);
goog.exportSymbol('proto.StreamResponse', null, global);
goog.exportSymbol('proto.TickerRequest', null, global);
goog.exportSymbol('proto.TickerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TickerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TickerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TickerRequest.displayName = 'proto.TickerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TickerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TickerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TickerResponse.displayName = 'proto.TickerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamRequest.displayName = 'proto.StreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamResponse.displayName = 'proto.StreamResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TickerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TickerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TickerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TickerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TickerRequest}
 */
proto.TickerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TickerRequest;
  return proto.TickerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TickerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TickerRequest}
 */
proto.TickerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TickerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TickerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TickerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TickerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.TickerRequest.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerRequest} returns this
 */
proto.TickerRequest.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TickerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TickerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TickerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TickerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradeDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tradeTime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tradeDateKst: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tradeTimeKst: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tradeTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    openingPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    highPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    lowPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    tradePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    prevClosingPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    change: jspb.Message.getFieldWithDefault(msg, 12, ""),
    changePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    changeRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    signedChangePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    signedChangeRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    tradeVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    accTradePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    accTradePrice24h: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    accTradeVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    accTradeVolume24h: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    highest52WeekPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    highest52WeekDate: jspb.Message.getFieldWithDefault(msg, 23, ""),
    lowest52WeekPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    lowest52WeekDate: jspb.Message.getFieldWithDefault(msg, 25, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 26, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TickerResponse}
 */
proto.TickerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TickerResponse;
  return proto.TickerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TickerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TickerResponse}
 */
proto.TickerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeDateKst(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeTimeKst(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTradeTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpeningPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowPrice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTradePrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrevClosingPrice(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setChange(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangePrice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangeRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSignedChangePrice(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSignedChangeRate(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTradeVolume(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccTradePrice(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccTradePrice24h(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccTradeVolume(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccTradeVolume24h(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighest52WeekPrice(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setHighest52WeekDate(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowest52WeekPrice(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setLowest52WeekDate(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TickerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TickerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TickerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TickerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradeDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTradeTime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTradeDateKst();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTradeTimeKst();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTradeTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getOpeningPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getHighPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getLowPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTradePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getPrevClosingPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getChange();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getChangePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getChangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getSignedChangePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getSignedChangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getTradeVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getAccTradePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getAccTradePrice24h();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getAccTradeVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getAccTradeVolume24h();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getHighest52WeekPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getHighest52WeekDate();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getLowest52WeekPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getLowest52WeekDate();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.TickerResponse.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trade_date = 2;
 * @return {string}
 */
proto.TickerResponse.prototype.getTradeDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string trade_time = 3;
 * @return {string}
 */
proto.TickerResponse.prototype.getTradeTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeTime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string trade_date_kst = 4;
 * @return {string}
 */
proto.TickerResponse.prototype.getTradeDateKst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeDateKst = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string trade_time_kst = 5;
 * @return {string}
 */
proto.TickerResponse.prototype.getTradeTimeKst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeTimeKst = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 trade_timestamp = 6;
 * @return {number}
 */
proto.TickerResponse.prototype.getTradeTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double opening_price = 7;
 * @return {number}
 */
proto.TickerResponse.prototype.getOpeningPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setOpeningPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double high_price = 8;
 * @return {number}
 */
proto.TickerResponse.prototype.getHighPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setHighPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double low_price = 9;
 * @return {number}
 */
proto.TickerResponse.prototype.getLowPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setLowPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double trade_price = 10;
 * @return {number}
 */
proto.TickerResponse.prototype.getTradePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double prev_closing_price = 11;
 * @return {number}
 */
proto.TickerResponse.prototype.getPrevClosingPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setPrevClosingPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string change = 12;
 * @return {string}
 */
proto.TickerResponse.prototype.getChange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setChange = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional double change_price = 13;
 * @return {number}
 */
proto.TickerResponse.prototype.getChangePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setChangePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double change_rate = 14;
 * @return {number}
 */
proto.TickerResponse.prototype.getChangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setChangeRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double signed_change_price = 15;
 * @return {number}
 */
proto.TickerResponse.prototype.getSignedChangePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setSignedChangePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double signed_change_rate = 16;
 * @return {number}
 */
proto.TickerResponse.prototype.getSignedChangeRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setSignedChangeRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double trade_volume = 17;
 * @return {number}
 */
proto.TickerResponse.prototype.getTradeVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTradeVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double acc_trade_price = 18;
 * @return {number}
 */
proto.TickerResponse.prototype.getAccTradePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setAccTradePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double acc_trade_price_24h = 19;
 * @return {number}
 */
proto.TickerResponse.prototype.getAccTradePrice24h = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setAccTradePrice24h = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double acc_trade_volume = 20;
 * @return {number}
 */
proto.TickerResponse.prototype.getAccTradeVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setAccTradeVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double acc_trade_volume_24h = 21;
 * @return {number}
 */
proto.TickerResponse.prototype.getAccTradeVolume24h = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setAccTradeVolume24h = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional double highest_52_week_price = 22;
 * @return {number}
 */
proto.TickerResponse.prototype.getHighest52WeekPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setHighest52WeekPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional string highest_52_week_date = 23;
 * @return {string}
 */
proto.TickerResponse.prototype.getHighest52WeekDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setHighest52WeekDate = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional double lowest_52_week_price = 24;
 * @return {number}
 */
proto.TickerResponse.prototype.getLowest52WeekPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setLowest52WeekPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional string lowest_52_week_date = 25;
 * @return {string}
 */
proto.TickerResponse.prototype.getLowest52WeekDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setLowest52WeekDate = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional int64 timestamp = 26;
 * @return {number}
 */
proto.TickerResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.TickerResponse} returns this
 */
proto.TickerResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamRequest}
 */
proto.StreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamRequest;
  return proto.StreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamRequest}
 */
proto.StreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.StreamRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamRequest} returns this
 */
proto.StreamRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.StreamRequest.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamRequest} returns this
 */
proto.StreamRequest.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamResponse}
 */
proto.StreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamResponse;
  return proto.StreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamResponse}
 */
proto.StreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.StreamResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamResponse} returns this
 */
proto.StreamResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
