// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Observable } from "rxjs";
import { share, take } from "rxjs/operators";

export const protobufPackage = "";

export interface TickerRequest {
  market: string;
}

export interface TickerResponse {
  /** 종목 구분 코드 */
  market: string;
  /** 최근 거래 일자(UTC) */
  tradeDate: string;
  /** 최근 거래 시각(UTC) */
  tradeTime: string;
  /** 최근 거래 일자(KST) */
  tradeDateKst: string;
  /** 최근 거래 시각(KST) */
  tradeTimeKst: string;
  /** 최근 거래 일시(UTC) */
  tradeTimestamp: number;
  /** 시가 */
  openingPrice: number;
  /** 고가 */
  highPrice: number;
  /** 저가 */
  lowPrice: number;
  /** 종가(현재가) */
  tradePrice: number;
  /** 전일 종가(UTC 0시 기준) */
  prevClosingPrice: number;
  /** 보합/상승/하락 구분 */
  change: string;
  /** 변화액의 절대값 */
  changePrice: number;
  /** 변화율의 절대값 */
  changeRate: number;
  /** 부호가 있는 변화액 */
  signedChangePrice: number;
  /** 부호가 있는 변화율 */
  signedChangeRate: number;
  /** 가장 최근 거래량 */
  tradeVolume: number;
  /** 누적 거래대금(UTC 0시 기준) */
  accTradePrice: number;
  /** 24시간 누적 거래대금 */
  accTradePrice24h: number;
  /** 누적 거래량(UTC 0시 기준) */
  accTradeVolume: number;
  /** 24시간 누적 거래량 */
  accTradeVolume24h: number;
  /** 52주 신고가 */
  highest52WeekPrice: number;
  /** 52주 신고가 */
  highest52WeekDate: string;
  /** 52주 신저가 */
  lowest52WeekPrice: number;
  /** 52주 신저가 */
  lowest52WeekDate: string;
  /** 타임스탬프 */
  timestamp: number;
}

export interface StreamRequest {
  type: string;
  code: string;
}

export interface StreamResponse {
  message: string;
}

function createBaseTickerRequest(): TickerRequest {
  return { market: "" };
}

export const TickerRequest: MessageFns<TickerRequest> = {
  encode(message: TickerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.market !== "") {
      writer.uint32(10).string(message.market);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.market = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerRequest {
    return { market: isSet(object.market) ? globalThis.String(object.market) : "" };
  },

  toJSON(message: TickerRequest): unknown {
    const obj: any = {};
    if (message.market !== "") {
      obj.market = message.market;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerRequest>, I>>(base?: I): TickerRequest {
    return TickerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerRequest>, I>>(object: I): TickerRequest {
    const message = createBaseTickerRequest();
    message.market = object.market ?? "";
    return message;
  },
};

function createBaseTickerResponse(): TickerResponse {
  return {
    market: "",
    tradeDate: "",
    tradeTime: "",
    tradeDateKst: "",
    tradeTimeKst: "",
    tradeTimestamp: 0,
    openingPrice: 0,
    highPrice: 0,
    lowPrice: 0,
    tradePrice: 0,
    prevClosingPrice: 0,
    change: "",
    changePrice: 0,
    changeRate: 0,
    signedChangePrice: 0,
    signedChangeRate: 0,
    tradeVolume: 0,
    accTradePrice: 0,
    accTradePrice24h: 0,
    accTradeVolume: 0,
    accTradeVolume24h: 0,
    highest52WeekPrice: 0,
    highest52WeekDate: "",
    lowest52WeekPrice: 0,
    lowest52WeekDate: "",
    timestamp: 0,
  };
}

export const TickerResponse: MessageFns<TickerResponse> = {
  encode(message: TickerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.market !== "") {
      writer.uint32(10).string(message.market);
    }
    if (message.tradeDate !== "") {
      writer.uint32(18).string(message.tradeDate);
    }
    if (message.tradeTime !== "") {
      writer.uint32(26).string(message.tradeTime);
    }
    if (message.tradeDateKst !== "") {
      writer.uint32(34).string(message.tradeDateKst);
    }
    if (message.tradeTimeKst !== "") {
      writer.uint32(42).string(message.tradeTimeKst);
    }
    if (message.tradeTimestamp !== 0) {
      writer.uint32(48).int64(message.tradeTimestamp);
    }
    if (message.openingPrice !== 0) {
      writer.uint32(57).double(message.openingPrice);
    }
    if (message.highPrice !== 0) {
      writer.uint32(65).double(message.highPrice);
    }
    if (message.lowPrice !== 0) {
      writer.uint32(73).double(message.lowPrice);
    }
    if (message.tradePrice !== 0) {
      writer.uint32(81).double(message.tradePrice);
    }
    if (message.prevClosingPrice !== 0) {
      writer.uint32(89).double(message.prevClosingPrice);
    }
    if (message.change !== "") {
      writer.uint32(98).string(message.change);
    }
    if (message.changePrice !== 0) {
      writer.uint32(105).double(message.changePrice);
    }
    if (message.changeRate !== 0) {
      writer.uint32(113).double(message.changeRate);
    }
    if (message.signedChangePrice !== 0) {
      writer.uint32(121).double(message.signedChangePrice);
    }
    if (message.signedChangeRate !== 0) {
      writer.uint32(129).double(message.signedChangeRate);
    }
    if (message.tradeVolume !== 0) {
      writer.uint32(137).double(message.tradeVolume);
    }
    if (message.accTradePrice !== 0) {
      writer.uint32(145).double(message.accTradePrice);
    }
    if (message.accTradePrice24h !== 0) {
      writer.uint32(153).double(message.accTradePrice24h);
    }
    if (message.accTradeVolume !== 0) {
      writer.uint32(161).double(message.accTradeVolume);
    }
    if (message.accTradeVolume24h !== 0) {
      writer.uint32(169).double(message.accTradeVolume24h);
    }
    if (message.highest52WeekPrice !== 0) {
      writer.uint32(177).double(message.highest52WeekPrice);
    }
    if (message.highest52WeekDate !== "") {
      writer.uint32(186).string(message.highest52WeekDate);
    }
    if (message.lowest52WeekPrice !== 0) {
      writer.uint32(193).double(message.lowest52WeekPrice);
    }
    if (message.lowest52WeekDate !== "") {
      writer.uint32(202).string(message.lowest52WeekDate);
    }
    if (message.timestamp !== 0) {
      writer.uint32(208).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.market = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tradeDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tradeTime = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tradeDateKst = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tradeTimeKst = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.tradeTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.openingPrice = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.highPrice = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.lowPrice = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.tradePrice = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.prevClosingPrice = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.change = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.changePrice = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.changeRate = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 121) {
            break;
          }

          message.signedChangePrice = reader.double();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.signedChangeRate = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 137) {
            break;
          }

          message.tradeVolume = reader.double();
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.accTradePrice = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 153) {
            break;
          }

          message.accTradePrice24h = reader.double();
          continue;
        }
        case 20: {
          if (tag !== 161) {
            break;
          }

          message.accTradeVolume = reader.double();
          continue;
        }
        case 21: {
          if (tag !== 169) {
            break;
          }

          message.accTradeVolume24h = reader.double();
          continue;
        }
        case 22: {
          if (tag !== 177) {
            break;
          }

          message.highest52WeekPrice = reader.double();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.highest52WeekDate = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 193) {
            break;
          }

          message.lowest52WeekPrice = reader.double();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.lowest52WeekDate = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerResponse {
    return {
      market: isSet(object.market) ? globalThis.String(object.market) : "",
      tradeDate: isSet(object.tradeDate) ? globalThis.String(object.tradeDate) : "",
      tradeTime: isSet(object.tradeTime) ? globalThis.String(object.tradeTime) : "",
      tradeDateKst: isSet(object.tradeDateKst) ? globalThis.String(object.tradeDateKst) : "",
      tradeTimeKst: isSet(object.tradeTimeKst) ? globalThis.String(object.tradeTimeKst) : "",
      tradeTimestamp: isSet(object.tradeTimestamp) ? globalThis.Number(object.tradeTimestamp) : 0,
      openingPrice: isSet(object.openingPrice) ? globalThis.Number(object.openingPrice) : 0,
      highPrice: isSet(object.highPrice) ? globalThis.Number(object.highPrice) : 0,
      lowPrice: isSet(object.lowPrice) ? globalThis.Number(object.lowPrice) : 0,
      tradePrice: isSet(object.tradePrice) ? globalThis.Number(object.tradePrice) : 0,
      prevClosingPrice: isSet(object.prevClosingPrice) ? globalThis.Number(object.prevClosingPrice) : 0,
      change: isSet(object.change) ? globalThis.String(object.change) : "",
      changePrice: isSet(object.changePrice) ? globalThis.Number(object.changePrice) : 0,
      changeRate: isSet(object.changeRate) ? globalThis.Number(object.changeRate) : 0,
      signedChangePrice: isSet(object.signedChangePrice) ? globalThis.Number(object.signedChangePrice) : 0,
      signedChangeRate: isSet(object.signedChangeRate) ? globalThis.Number(object.signedChangeRate) : 0,
      tradeVolume: isSet(object.tradeVolume) ? globalThis.Number(object.tradeVolume) : 0,
      accTradePrice: isSet(object.accTradePrice) ? globalThis.Number(object.accTradePrice) : 0,
      accTradePrice24h: isSet(object.accTradePrice24h) ? globalThis.Number(object.accTradePrice24h) : 0,
      accTradeVolume: isSet(object.accTradeVolume) ? globalThis.Number(object.accTradeVolume) : 0,
      accTradeVolume24h: isSet(object.accTradeVolume24h) ? globalThis.Number(object.accTradeVolume24h) : 0,
      highest52WeekPrice: isSet(object.highest52WeekPrice) ? globalThis.Number(object.highest52WeekPrice) : 0,
      highest52WeekDate: isSet(object.highest52WeekDate) ? globalThis.String(object.highest52WeekDate) : "",
      lowest52WeekPrice: isSet(object.lowest52WeekPrice) ? globalThis.Number(object.lowest52WeekPrice) : 0,
      lowest52WeekDate: isSet(object.lowest52WeekDate) ? globalThis.String(object.lowest52WeekDate) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: TickerResponse): unknown {
    const obj: any = {};
    if (message.market !== "") {
      obj.market = message.market;
    }
    if (message.tradeDate !== "") {
      obj.tradeDate = message.tradeDate;
    }
    if (message.tradeTime !== "") {
      obj.tradeTime = message.tradeTime;
    }
    if (message.tradeDateKst !== "") {
      obj.tradeDateKst = message.tradeDateKst;
    }
    if (message.tradeTimeKst !== "") {
      obj.tradeTimeKst = message.tradeTimeKst;
    }
    if (message.tradeTimestamp !== 0) {
      obj.tradeTimestamp = Math.round(message.tradeTimestamp);
    }
    if (message.openingPrice !== 0) {
      obj.openingPrice = message.openingPrice;
    }
    if (message.highPrice !== 0) {
      obj.highPrice = message.highPrice;
    }
    if (message.lowPrice !== 0) {
      obj.lowPrice = message.lowPrice;
    }
    if (message.tradePrice !== 0) {
      obj.tradePrice = message.tradePrice;
    }
    if (message.prevClosingPrice !== 0) {
      obj.prevClosingPrice = message.prevClosingPrice;
    }
    if (message.change !== "") {
      obj.change = message.change;
    }
    if (message.changePrice !== 0) {
      obj.changePrice = message.changePrice;
    }
    if (message.changeRate !== 0) {
      obj.changeRate = message.changeRate;
    }
    if (message.signedChangePrice !== 0) {
      obj.signedChangePrice = message.signedChangePrice;
    }
    if (message.signedChangeRate !== 0) {
      obj.signedChangeRate = message.signedChangeRate;
    }
    if (message.tradeVolume !== 0) {
      obj.tradeVolume = message.tradeVolume;
    }
    if (message.accTradePrice !== 0) {
      obj.accTradePrice = message.accTradePrice;
    }
    if (message.accTradePrice24h !== 0) {
      obj.accTradePrice24h = message.accTradePrice24h;
    }
    if (message.accTradeVolume !== 0) {
      obj.accTradeVolume = message.accTradeVolume;
    }
    if (message.accTradeVolume24h !== 0) {
      obj.accTradeVolume24h = message.accTradeVolume24h;
    }
    if (message.highest52WeekPrice !== 0) {
      obj.highest52WeekPrice = message.highest52WeekPrice;
    }
    if (message.highest52WeekDate !== "") {
      obj.highest52WeekDate = message.highest52WeekDate;
    }
    if (message.lowest52WeekPrice !== 0) {
      obj.lowest52WeekPrice = message.lowest52WeekPrice;
    }
    if (message.lowest52WeekDate !== "") {
      obj.lowest52WeekDate = message.lowest52WeekDate;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerResponse>, I>>(base?: I): TickerResponse {
    return TickerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerResponse>, I>>(object: I): TickerResponse {
    const message = createBaseTickerResponse();
    message.market = object.market ?? "";
    message.tradeDate = object.tradeDate ?? "";
    message.tradeTime = object.tradeTime ?? "";
    message.tradeDateKst = object.tradeDateKst ?? "";
    message.tradeTimeKst = object.tradeTimeKst ?? "";
    message.tradeTimestamp = object.tradeTimestamp ?? 0;
    message.openingPrice = object.openingPrice ?? 0;
    message.highPrice = object.highPrice ?? 0;
    message.lowPrice = object.lowPrice ?? 0;
    message.tradePrice = object.tradePrice ?? 0;
    message.prevClosingPrice = object.prevClosingPrice ?? 0;
    message.change = object.change ?? "";
    message.changePrice = object.changePrice ?? 0;
    message.changeRate = object.changeRate ?? 0;
    message.signedChangePrice = object.signedChangePrice ?? 0;
    message.signedChangeRate = object.signedChangeRate ?? 0;
    message.tradeVolume = object.tradeVolume ?? 0;
    message.accTradePrice = object.accTradePrice ?? 0;
    message.accTradePrice24h = object.accTradePrice24h ?? 0;
    message.accTradeVolume = object.accTradeVolume ?? 0;
    message.accTradeVolume24h = object.accTradeVolume24h ?? 0;
    message.highest52WeekPrice = object.highest52WeekPrice ?? 0;
    message.highest52WeekDate = object.highest52WeekDate ?? "";
    message.lowest52WeekPrice = object.lowest52WeekPrice ?? 0;
    message.lowest52WeekDate = object.lowest52WeekDate ?? "";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseStreamRequest(): StreamRequest {
  return { type: "", code: "" };
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(message: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamRequest {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: StreamRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamRequest>, I>>(base?: I): StreamRequest {
    return StreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamRequest>, I>>(object: I): StreamRequest {
    const message = createBaseStreamRequest();
    message.type = object.type ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseStreamResponse(): StreamResponse {
  return { message: "" };
}

export const StreamResponse: MessageFns<StreamResponse> = {
  encode(message: StreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: StreamResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamResponse>, I>>(base?: I): StreamResponse {
    return StreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamResponse>, I>>(object: I): StreamResponse {
    const message = createBaseStreamResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export interface TickerService {
  getTicker(request: DeepPartial<TickerRequest>, metadata?: grpc.Metadata): Observable<TickerResponse>;
  streamTicker(request: DeepPartial<StreamRequest>, metadata?: grpc.Metadata): Observable<StreamResponse>;
}

export class TickerServiceClientImpl implements TickerService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.getTicker = this.getTicker.bind(this);
    this.streamTicker = this.streamTicker.bind(this);
  }

  getTicker(request: DeepPartial<TickerRequest>, metadata?: grpc.Metadata): Observable<TickerResponse> {
    return this.rpc.unary(TickerServicegetTickerDesc, TickerRequest.fromPartial(request), metadata);
  }

  streamTicker(request: DeepPartial<StreamRequest>, metadata?: grpc.Metadata): Observable<StreamResponse> {
    return this.rpc.invoke(TickerServicestreamTickerDesc, StreamRequest.fromPartial(request), metadata);
  }
}

export const TickerServiceDesc = { serviceName: "TickerService" };

export const TickerServicegetTickerDesc: UnaryMethodDefinitionish = {
  methodName: "getTicker",
  service: TickerServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return TickerRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = TickerResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const TickerServicestreamTickerDesc: UnaryMethodDefinitionish = {
  methodName: "streamTicker",
  service: TickerServiceDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return StreamRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = StreamResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: (next) => {
          if (next.status !== 0) {
            const err = new GrpcWebError(next.statusMessage, next.status, next.trailers);
            observer.error(err);
          } else {
            observer.next(next.message as any);
            observer.complete();
          }
        },
      });
    }).pipe(take(1));
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
