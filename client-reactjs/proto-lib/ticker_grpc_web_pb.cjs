/**
 * @fileoverview gRPC-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: ticker.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {}
grpc.web = require('grpc-web')

const proto = require('./ticker_pb.cjs')

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.TickerServiceClient = function (hostname, credentials, options) {
    if (!options) options = {}
    options.format = 'text'

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options)

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '')
}

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.TickerServicePromiseClient = function (hostname, credentials, options) {
    if (!options) options = {}
    options.format = 'text'

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options)

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '')
}

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.TickerRequest,
 *   !proto.TickerResponse>}
 */
const methodDescriptor_TickerService_getTicker = new grpc.web.MethodDescriptor(
    '/TickerService/getTicker',
    grpc.web.MethodType.UNARY,
    proto.TickerRequest,
    proto.TickerResponse,
    /**
     * @param {!proto.TickerRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
        return request.serializeBinary()
    },
    proto.TickerResponse.deserializeBinary,
)

/**
 * @param {!proto.TickerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.TickerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.TickerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.TickerServiceClient.prototype.getTicker = function (request, metadata, callback) {
    return this.client_.rpcCall(
        this.hostname_ + '/TickerService/getTicker',
        request,
        metadata || {},
        methodDescriptor_TickerService_getTicker,
        callback,
    )
}

/**
 * @param {!proto.TickerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.TickerResponse>}
 *     Promise that resolves to the response
 */
proto.TickerServicePromiseClient.prototype.getTicker = function (request, metadata) {
    return this.client_.unaryCall(
        this.hostname_ + '/TickerService/getTicker',
        request,
        metadata || {},
        methodDescriptor_TickerService_getTicker,
    )
}

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.StreamRequest,
 *   !proto.StreamResponse>}
 */
const methodDescriptor_TickerService_streamTicker = new grpc.web.MethodDescriptor(
    '/TickerService/streamTicker',
    grpc.web.MethodType.SERVER_STREAMING,
    proto.StreamRequest,
    proto.StreamResponse,
    /**
     * @param {!proto.StreamRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
        return request.serializeBinary()
    },
    proto.StreamResponse.deserializeBinary,
)

/**
 * @param {!proto.StreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.StreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.TickerServiceClient.prototype.streamTicker = function (request, metadata) {
    return this.client_.serverStreaming(
        this.hostname_ + '/TickerService/streamTicker',
        request,
        metadata || {},
        methodDescriptor_TickerService_streamTicker,
    )
}

/**
 * @param {!proto.StreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.StreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.TickerServicePromiseClient.prototype.streamTicker = function (request, metadata) {
    return this.client_.serverStreaming(
        this.hostname_ + '/TickerService/streamTicker',
        request,
        metadata || {},
        methodDescriptor_TickerService_streamTicker,
    )
}

module.exports = proto
